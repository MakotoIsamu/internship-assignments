# JavaScript vs Python: Fundamental Comparison

## Basic Syntax

### JavaScript
```javascript
// Variable declarations
let x = 10;          // Mutable variable
const PI = 3.14159;  // Constant variable
var oldStyleDeclaration = "not recommended";

// Function declaration
function greet(name) {
    return `Hello, ${name}!`;
}

// Arrow function
const multiply = (a, b) => a * b;
```

### Python
```python
# Variable declarations
x = 10           # Dynamic typing
PI = 3.14159     # Constants by convention
# No separate declaration for mutability

# Function declaration
def greet(name):
    return f"Hello, {name}!"

# Lambda function (equivalent to arrow function)
multiply = lambda a, b: a * b
```

## Data Types

### JavaScript
```javascript
// Primitive Types
let number = 42;             // Number
let text = "Hello";          // String
let isTrue = true;           // Boolean
let undef = undefined;       // Undefined
let empty = null;            // Null

// Complex Types
let array = [1, 2, 3];       // Array
let object = {               // Object
    name: "John",
    age: 30
};

// Special Types
let sym = Symbol("unique");  // Symbol
```

### Python
```python
# Primitive Types
number = 42             # Integer
text = "Hello"          # String
is_true = True          # Boolean
empty = None            # None (equivalent to null)

# Complex Types
array = [1, 2, 3]       # List
tuple = (1, 2, 3)       # Immutable list
dictionary = {          # Dictionary (similar to object)
    "name": "John",
    "age": 30
}

# Special Types
from typing import List, Dict  # Type hinting
```

## Control Structures

### JavaScript
```javascript
// Conditional
if (x > 10) {
    console.log("Greater than 10");
} else if (x < 5) {
    console.log("Less than 5");
} else {
    console.log("Between 5 and 10");
}

// Switch Statement
switch(x) {
    case 1:
        console.log("One");
        break;
    case 2:
        console.log("Two");
        break;
    default:
        console.log("Other");
}

// Loops
for (let i = 0; i < 5; i++) {
    console.log(i);
}

array.forEach(item => console.log(item));
```

### Python
```python
# Conditional
if x > 10:
    print("Greater than 10")
elif x < 5:
    print("Less than 5")
else:
    print("Between 5 and 10")

# No direct switch, use dictionary or match (Python 3.10+)
match x:
    case 1:
        print("One")
    case 2:
        print("Two")
    case _:
        print("Other")

# Loops
for i in range(5):
    print(i)

for item in array:
    print(item)
```

## Object-Oriented Programming

### JavaScript
```javascript
// Class Definition
class Person {
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }

    introduce() {
        return `I'm ${this.name}`;
    }

    // Static method
    static createAnonymous() {
        return new Person("Anonymous", 0);
    }
}

// Inheritance
class Employee extends Person {
    constructor(name, age, job) {
        super(name, age);
        this.job = job;
    }
}
```

### Python
```python
# Class Definition
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def introduce(self):
        return f"I'm {self.name}"

    # Static method
    @staticmethod
    def create_anonymous():
        return Person("Anonymous", 0)

# Inheritance
class Employee(Person):
    def __init__(self, name, age, job):
        super().__init__(name, age)
        self.job = job
```

## Async Programming

### JavaScript
```javascript
// Promise
function fetchData() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve("Data fetched");
        }, 1000);
    });
}

async function getData() {
    try {
        const result = await fetchData();
        console.log(result);
    } catch (error) {
        console.error(error);
    }
}
```

### Python
```python
import asyncio

# Async function
async def fetch_data():
    await asyncio.sleep(1)
    return "Data fetched"

async def get_data():
    try:
        result = await fetch_data()
        print(result)
    except Exception as error:
        print(error)

# Requires running in async event loop
asyncio.run(get_data())
```

## Key Differences

1. **Typing**
   - JavaScript: Dynamically typed, loosely typed
   - Python: Dynamically typed, but with optional type hinting

2. **Syntax**
   - JavaScript: Uses curly braces {} for blocks
   - Python: Uses indentation for block structure

3. **Function Declaration**
   - JavaScript: `function` keyword or arrow functions
   - Python: `def` keyword or lambda functions

4. **Object-Oriented Programming**
   - JavaScript: Prototype-based (class syntax is syntactic sugar)
   - Python: Traditional class-based OOP

5. **Async Programming**
   - JavaScript: Promise and async/await
   - Python: Coroutines with async/await (requires asyncio)